<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acasa</title>
    <link rel="stylesheet" href="beneficiarHome.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
</head>
<body>
    <h1>Bun venit, beneficiar!</h1>
    <div class="container">
        <h2>Adresa de Primire a Donațiilor:</h2>
        <input type="text" id="addressInput" placeholder="Introduceți adresa de primire a donațiilor">
        <div class="AL">
            <button onclick="showMap()">Afișează Locația</button>
        </div>
        <div id="map" style="height: 400px;"></div>
        <p id="address"></p>
        <h2>Adrese salvate:</h2>
        <ul id="addressList" class="address-list"></ul>
        <h2>Alimente donate:</h2>
        <input type="text" id="foodInput" placeholder="Introduceți alimentul de care aveți nevoie">
        <button onclick="addFood()">Adaugă aliment</button>
        <ul id="foodList" class="food-list"></ul>
        <h2>Sugestii de la donatori:</h2>
        <ul id="suggestionsList" class="suggestions-list"></ul>
    </div>

    <script>
        let loggedInUsername = ''; // Inițializare globală a variabilei
    
        // Obține întregul URL al paginii
        const url = window.location.href;
    
        // Extrage query string-ul din URL
        const queryString = url.split('?')[1];
    
        // Verifică dacă există un query string
        if (queryString) {
            // Parsează parametrii query string
            const urlParams = new URLSearchParams(queryString);
    
            // Obține valoarea parametrului "username"
            loggedInUsername = urlParams.get('username') || ''; // Asignare valorii variabilei
        } else {
            console.log('Nu există parametrii query string în URL.');
        }
    </script>
    
    
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        var map = L.map('map').setView([45.7489, 21.2087], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        var foodList = JSON.parse(localStorage.getItem('foodList')) || [];
        var suggestionsList = [];
        var addressList = JSON.parse(localStorage.getItem('addressList')) || [];
        var markers = [];

        displayAddressList();
        displayFoodList();
        loadMarkers();

        function showMap() {
            var address = document.getElementById('addressInput').value;
        
            var geocoder = L.Control.Geocoder.nominatim();
            geocoder.geocode(address, function(results) {
                if (results && results.length > 0) {
                    var latlng = results[0].center;
                    map.flyTo(latlng, 15);
                    var marker = L.marker(latlng).addTo(map)
                        .bindPopup(address)
                        .openPopup();
                    markers.push(marker);
        
                    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latlng.lat}&lon=${latlng.lng}`)
                    .then(response => response.json())
                    .then(data => {
                        address = data.display_name;
                        var coordinates = { address: address, latlng: latlng, username: loggedInUsername }; // adaugă username
                        addressList.push(coordinates);
                        localStorage.setItem('addressList', JSON.stringify(addressList)); // Salvează în localStorage
                        displayAddressList();
                        sendAddressList(addressList); // Trimite adresa și coordonatele către backend
                    })
                    .catch(error => {
                        console.error('Eroare la obținerea adresei:', error);
                    });
                } else {
                    console.error('Adresa nu a putut fi găsită.');
                    alert('Adresa nu a putut fi găsită. Vă rugăm să încercați din nou.');
                }
            });
        }
        

        function sendAddressList(addressList) {
            fetch('/salvareAdrese', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ coordinates: addressList }) // Trimite adresa și coordonatele către backend
            })
            .then(response => response.json())
            .then(data => {
                console.log('Adresele au fost trimise cu succes către backend!', data);
            })
            .catch(error => {
                console.error('Eroare la trimiterea adreselor către backend:', error);
            });
        }

        function displayAddressList() {
            var list = document.getElementById('addressList');
            list.innerHTML = '';
        
            var userAddresses = addressList.filter(address => address.username === loggedInUsername);
        
            userAddresses.forEach(function(address, index) {
                var li = document.createElement('li');
                li.textContent = `Adresă: ${address.address}, Utilizator: ${address.username}`;
                var button = document.createElement('button');
                button.textContent = 'Șterge Adresa';
                button.onclick = function() {
                    removeAddress(address.address);
                };
                li.appendChild(button);
                list.appendChild(li);
            });
        }
        
        
        

        var addressList = JSON.parse(localStorage.getItem('addressList')) || [];

function loadMarkers() {
    // Verificăm dacă există adrese salvate în local storage
    if (addressList.length > 0) {
        addressList.forEach(function(address) {
            var marker = L.marker([address.latlng.lat, address.latlng.lng]).addTo(map)
                .bindPopup(address.address)
                .openPopup();
            markers.push(marker);
        });
    } else {
        console.log('Nu există adrese salvate în local storage.');
    }
}
        

      // Funcție pentru actualizarea datelor din localStorage și afișarea listei de adrese la încărcarea paginii
function initializePage() {
    displayAddressList();
    displayFoodList();
}

// Adaugăm un eveniment pentru a apela funcția de inițializare la încărcarea paginii
window.addEventListener('load', initializePage);


function removeAddress(address) {
    const index = addressList.findIndex(item => item.address === address);
    if (index !== -1) {
        const removedAddress = addressList[index];
        addressList.splice(index, 1); 
        displayAddressList(); 

        localStorage.setItem('addressList', JSON.stringify(addressList));

        if (markers[index]) {
            map.removeLayer(markers[index]);
            markers.splice(index, 1);
        }

        fetch('/removeAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ address: removedAddress.address })
        })
        .then(response => response.json())
        .then(data => {
            console.log(`Adresa a fost ștearsă: ${removedAddress.address}`);
        })
        .catch(error => {
            console.error('Eroare la ștergerea adresei din baza de date:', error);
        });
    }
}


        

        function addFood() {
            var food = document.getElementById('foodInput').value;
            if (food.trim() !== '' && !foodList.includes(food)) {
                foodList.push(food);
                displayFoodList();
                sendFoodList();
                document.getElementById('foodInput').value = '';
            } else if (foodList.includes(food)) {
                alert('Alimentul este deja în listă!');
            }
        }

        function removeFood(index) {
            const removedFood = foodList[index];
            foodList.splice(index, 1);
            localStorage.setItem('foodList', JSON.stringify(foodList)); // Salvează lista actualizată în localStorage
            displayFoodList();
            sendFoodList();
            removeNeededFood(removedFood); // Șterge alimentul din lista de alimente necesare
        }

        function removeNeededFood(removedFood) {
            fetch('/removeNeededFood', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ food: removedFood })
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Alimentul nu a putut fi șters din lista de alimente necesare');
                }
            })
            .then(data => {
                console.log('Alimentul a fost șters din lista de alimente necesare cu succes!');
            })
            .catch(error => {
                console.error('Eroare la ștergerea alimentului din lista de alimente necesare:', error);
            });
        }

        function sendFoodList() {
            fetch('/salvareAlimente', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ foods: foodList })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Alimentele au fost trimise cu succes către backend!', data);
                localStorage.setItem('foodList', JSON.stringify(foodList)); 
            })
            .catch(error => {
                console.error('Eroare la trimiterea alimentelor către backend:', error);
            });
        }

        function displayFoodList() {
            var list = document.getElementById('foodList');
            list.innerHTML = '';
            foodList.forEach(function(food, index) {
                var li = document.createElement('li');
                li.textContent = food;
                var button = document.createElement('button');
                button.textContent = 'Șterge';
                button.onclick = function() {
                    removeFood(index);
                };
                li.appendChild(button);
                list.appendChild(li);
            });
        }

        function displaySuggestions(suggestions) {
        var list = document.getElementById('suggestionsList');
        list.innerHTML = '';
        suggestions.forEach(function(suggestion) {
            var li = document.createElement('li');
            var suggestionText = document.createElement('p');
            suggestionText.textContent = suggestion.suggestion;
            li.appendChild(suggestionText);

            var acceptButton = document.createElement('button');
            acceptButton.textContent = 'Acceptă';
            acceptButton.classList.add('accept-btn');
            acceptButton.onclick = function() {
                acceptSuggestion(suggestion._id, suggestion.suggestion);
            };

            var rejectButton = document.createElement('button');
            rejectButton.textContent = 'Respinge';
            rejectButton.classList.add('reject-btn');
            rejectButton.onclick = function() {
                rejectSuggestion(suggestion._id);
            };

            li.appendChild(acceptButton);
            li.appendChild(rejectButton);
            list.appendChild(li);
        });
    }

        async function getSuggestions() {
            try {
                const response = await fetch('/getSuggestions');
                const suggestions = await response.json();
                displaySuggestions(suggestions);
            } catch(error) {
                console.error('Eroare la obținerea sugestiilor', error);
            }
        }

        function acceptSuggestion(suggestionId, suggestion) {
            fetch('/acceptSuggestion', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ suggestionId: suggestionId, suggestion: suggestion })
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Sugestia nu a putut fi acceptată');
                }
            })
            .then(data => {
                console.log('Sugestia a fost acceptată și alimentul a fost adăugat la lista de alimente donate!');
                foodList.push(suggestion);
                sendFoodList();
                displayFoodList();
                getSuggestions();
            })
            .catch(error => {
                console.error('Eroare la acceptarea sugestiei:', error);
            });
        }

        async function rejectSuggestion(suggestionId) {
            try {
                const response = await fetch('/rejectSuggestion', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ suggestionId })
                });
                const result = await response.json();
                console.log(result);
                getSuggestions();
            } catch(error) {
                console.error('Eroare la respingerea sugestiei', error);
            }
        }

        getSuggestions();
    </script>
</body>
</html>
