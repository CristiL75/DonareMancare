<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acasa</title>
    <link rel = "stylesheet" href = "donatorHome.css">
    <!--<link rel="stylesheet" href="styles.css">-->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
</head>
<body>
    <% if (userType === 'donator') { %>
        <h1>Bun venit, donator!</h1>
        <div class="container">
            <h2>Puncte de colectare:</h2>
            <div id="map"></div>
            <h2>Alimente necesare:</h2>
            <ul id="neededFoods" class="food-list"></ul>
            <h2>Sugestii pentru firmele intermediare:</h2>
            <input type="text" id="suggestion" placeholder="Introduceți sugestia pentru beneficiar">
            <button onclick="sendSuggestion()">Trimite sugestia</button>
            <h2>Sugestii de alimente pentru donat:</h2>
            <ul id="aiSuggestions" class="food-list"></ul>
        </div>
    <% } else { %>
        <p>Acces restricționat. Trebuie să fii donator pentru a accesa această pagină.</p>
    <% } %>
    <!--<p>Token: <%= token %></p>
    <p>User Type: <%= userType %></p> Afișează userType folosind <%= %> -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        var map = L.map('map').setView([45.7538355, 21.2257474], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        async function getCollectionPoints() {
            try {
                const response = await fetch('/getCollectionPoints');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const collectionPoints = await response.json();
                console.log('Collection points:', collectionPoints);
                if (collectionPoints.length > 0) {
                    displayCollectionPoints(collectionPoints);
                }
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }
        
        async function displayCollectionPoints(collectionPoints) {
            collectionPoints.forEach(function (point) {
                if (point.lat !== undefined && point.lng !== undefined) {
                    var popupContent = `<b>Adresă:</b> ${point.address}<br><b>Latitudine:</b> ${point.lat}<br><b>Longitudine:</b> ${point.lng}`;
                    L.marker([point.lat, point.lng])
                        .addTo(map)
                        .bindPopup(popupContent)
                        .openPopup();
                }
            });
            if (collectionPoints.length > 0 && collectionPoints[0].lat !== undefined && collectionPoints[0].lng !== undefined) {
                map.setView([collectionPoints[0].lat, collectionPoints[0].lng], 13);
            }
        }
        

        
        async function getNeededFoods(){
            try{
                const response = await fetch('/getNeededFoods');
                const neededFoods = await response.json();
                displayNeededFoods(neededFoods);
                displayAiSuggestions(neededFoods);
            }
            catch(error){
                console.error('Eroare la obtinerea alimentelor necesare:',error);
            }
        }

        getCollectionPoints();

        function displayNeededFoods(foods){
            var list = document.getElementById('neededFoods');
            list.innerHTML = '';
            foods.forEach(function(food){
                var li = document.createElement('li');
                li.textContent = food.food;
                list.appendChild(li);
            });
        }

      

        getNeededFoods();

      
        async function sendSuggestion(){
            var suggestion = document.getElementById('suggestion').value.trim().toLowerCase();
            if(suggestion !== ''){
   
                const response = await fetch('/getNeededFoods');
                const neededFoods = await response.json();
        
         
                const suggestionExists = neededFoods.some(food => food.food.toLowerCase() === suggestion);
        
                if(suggestionExists){
                    alert('Acest aliment este deja pe lista de alimente necesare!');
                } else {
                    fetch('/sendSuggestion', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ suggestion: suggestion })
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Sugestia a fost trimisă cu succes!', data);
                        document.getElementById('suggestion').value = '';
                    })
                    .catch(error => {
                        console.error('Eroare la trimiterea sugestiei:', error);
                    });
                }
            }
        }
        async function updateDonorPage(updatedAddresses) {
            try {
                const response = await fetch('/updateDonorPage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ addresses: updatedAddresses })
                });
                if (response.ok) {
                    console.log('Pagina donatorului a fost actualizată cu succes!');
                } else {
                    throw new Error('Eroare la actualizarea paginii donatorului');
                }
            } catch (error) {
                console.error('Eroare la actualizarea paginii donatorului:', error);
            }
        }
        
        // După ștergerea adresei de pe pagina beneficiarului, apelăm funcția updateDonorPage cu noile coordonate actualizate
        // După ștergerea adresei de pe pagina beneficiarului, apelăm funcția updateDonorPage cu noile coordonate actualizate și actualizăm harta
     
        
        async function onDeleteAddress(addressId) {
            try {
                const updatedAddresses = await getUpdatedAddressesAfterDeletion(addressId); // Obține adresele actualizate după ștergere
                const response = await fetch('/updateDonorPage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ addresses: updatedAddresses }) // Trimite adresele actualizate către backend
                });
                if (response.ok) {
                    console.log('Pagina donatorului a fost actualizată cu succes!');
                    updateMap(updatedAddresses); // Actualizează harta cu noile adrese
                } else {
                    throw new Error('Eroare la actualizarea paginii donatorului');
                }
            } catch (error) {
                console.error('Eroare la actualizarea paginii donatorului:', error);
            }
        }
        
        // Funcția pentru a actualiza harta cu noile adrese actualizate
        function updateMap(updatedAddresses) {
            // Ștergem toate marcatorii de pe hartă
            map.eachLayer(function (layer) {
                if (layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });
            // Adăugăm din nou marcatorii cu noile coordonate actualizate
            updatedAddresses.forEach(function (address) {
                if (address.lat !== undefined && address.lng !== undefined) {
                    var popupContent = `<b>Adresă:</b> ${address.address}<br><b>Latitudine:</b> ${address.lat}<br><b>Longitudine:</b> ${address.lng}`;
                    L.marker([address.lat, address.lng])
                        .addTo(map)
                        .bindPopup(popupContent)
                        .openPopup();
                }
            });
            // Setăm centrul hărții pe primul marker, dacă există
            if (updatedAddresses.length > 0 && updatedAddresses[0].lat !== undefined && updatedAddresses[0].lng !== undefined) {
                map.setView([updatedAddresses[0].lat, updatedAddresses[0].lng], 13);
            }
        }
        
        

    function getUpdatedAddressesAfterDeletion(addressId) {
        for (let i = 0; i < addresses.length; i++) {
            if (addresses[i].id === addressId) {
                addresses.splice(i, 1); 
                break; 
            }
        }
        return addresses; // Returnăm lista actualizată de adrese
    }

            


        function displayAiSuggestions(neededFoods){
            var donatedFoods = [];
            var foodList = document.getElementById('neededFoods').getElementsByTagName('li');
            for (var i = 0; i < foodList.length; i++) {
                donatedFoods.push(foodList[i].textContent.toLowerCase());
            }
            const aiSuggestedFoods = getAiFoodSuggestions(neededFoods, donatedFoods);
            var list = document.getElementById('aiSuggestions');
            list.innerHTML = '';
            aiSuggestedFoods.forEach(function(food){
                var li = document.createElement('li');
                li.textContent = food;
                list.appendChild(li);
            });
        }


function getAiFoodSuggestions(neededFoods, donatedFoods) {
    const aiSuggestedFoods = [
      "paste făinoase",
      "orez",
      "ulei",
      "zahăr",
      "făină",
      "lapte",
      "fasole",
      "ciocolată",
      "ceai",
      "cafea",
      "cereale",
      "miere",
      "sare",
      "condimente",
      "suc de fructe",
      "suc de legume",
      "biscuiți",
      "căpșuni",
      "banane",
      "mere",
      "pâine",
      "cârnați",
      "brânză",
      "ouă",
      "cartofi",
      "morcovi",
      "roșii",
      "varză",
      "ardei",
      "pui",
      "porc",
      "vita",
      "pește",
      "fructe de mare",
      "fructe uscate",
      "nuci",
      "seminte",
      "patiserii",
      "lapte praf",
      "iaurt",
      "brânză topită",
      "cașcaval",
      "unt",
      "gem",
      "compot"
    ];
  
    const uniqueSuggestedFoods = aiSuggestedFoods.filter(
      food =>
        !donatedFoods.includes(food.toLowerCase()) &&
        !neededFoods.some(neededFood => neededFood.food.toLowerCase() === food.toLowerCase())
    );
  
    return uniqueSuggestedFoods;
  }
  

    </script>
</body>
</html>
